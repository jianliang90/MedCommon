import os
import numpy as np

import SimpleITK as sitk
from tqdm import tqdm
from glob import glob

import torch
import torch.nn

from torch.utils.data import Dataset, DataLoader

import sys
COMMON_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), os.path.pardir, os.path.pardir)
print(COMMON_ROOT)
sys.path.append(COMMON_ROOT)
sys.path.append(os.path.join(COMMON_ROOT, 'external_lib/torchio'))

from utils.datasets_utils import *
from utils.datasets_utils import DatasetsUtils
from utils.data_io_utils import DataIO

import torchio as tio



'''
    该通用分割类，适用于如下构成的文件夹格式，images如果为dicom格式，请先转换为nii.gz的形式
    tree -L 2
    .
    ├── images
    │   ├── 1.2.840.113704.1.111.10192.1571886399.11.nii.gz
    │   ├── 1.2.840.113704.1.111.11692.1420599548.14.nii.gz
    │   ├── 1.2.840.113704.1.111.11716.1415240146.11.nii.gz
    │   ├── 1.2.840.113704.1.111.12576.1389599418.6.nii.gz
    │   ├── 1.2.840.113704.1.111.13172.1389599763.7.nii.gz
    │   ├── 1.2.840.113704.1.111.1384.1392885868.9.nii.gz
    │   ├── 1.2.840.113704.1.111.2452.1387439529.10.nii.gz
    │   ├── 1.2.840.113704.1.111.2632.1390443812.11.nii.gz
    │   ├── 1.2.840.113704.1.111.5624.1392092458.10.nii.gz
    │   ├── 1.2.840.113704.1.111.6756.1592183917.11.nii.gz
    │   ├── 1.2.840.113704.1.111.6896.1389252289.9.nii.gz
    │   ├── 1.2.840.113704.1.111.7780.1388040486.10.nii.gz
    │   ├── 1.2.840.113704.1.111.7956.1562030574.11.nii.gz
    │   ├── 1.2.840.113704.1.111.8660.1421889850.10.nii.gz
    │   ├── 1.2.840.113704.1.111.8776.1415860078.10.nii.gz
    │   ├── 1.2.840.113704.1.111.9536.1577060319.15.nii.gz
    │   ├── 1.3.46.670589.33.1.63700781943575774800001.5142437508376053996.nii.gz
    │   ├── 1.3.46.670589.33.1.63722560084727458900002.4851763629495772847.nii.gz
    │   └── 1.3.46.670589.33.1.63725405821017542900002.4919856832254375598.nii.gz
    └── masks
        ├── 1.2.840.113704.1.111.10192.1571886399.11.nii.gz
        ├── 1.2.840.113704.1.111.11692.1420599548.14.nii.gz
        ├── 1.2.840.113704.1.111.11716.1415240146.11.nii.gz
        ├── 1.2.840.113704.1.111.12576.1389599418.6.nii.gz
        ├── 1.2.840.113704.1.111.13172.1389599763.7.nii.gz
        ├── 1.2.840.113704.1.111.1384.1392885868.9.nii.gz
        ├── 1.2.840.113704.1.111.2452.1387439529.10.nii.gz
        ├── 1.2.840.113704.1.111.2632.1390443812.11.nii.gz
        ├── 1.2.840.113704.1.111.5624.1392092458.10.nii.gz
        ├── 1.2.840.113704.1.111.6756.1592183917.11.nii.gz
        ├── 1.2.840.113704.1.111.6896.1389252289.9.nii.gz
        ├── 1.2.840.113704.1.111.7780.1388040486.10.nii.gz
        ├── 1.2.840.113704.1.111.7956.1562030574.11.nii.gz
        ├── 1.2.840.113704.1.111.8660.1421889850.10.nii.gz
        ├── 1.2.840.113704.1.111.8776.1415860078.10.nii.gz
        ├── 1.2.840.113704.1.111.9536.1577060319.15.nii.gz
        ├── 1.3.46.670589.33.1.63700781943575774800001.5142437508376053996.nii.gz
        ├── 1.3.46.670589.33.1.63722560084727458900002.4851763629495772847.nii.gz
        └── 1.3.46.670589.33.1.63725405821017542900002.4919856832254375598.nii.gz
'''

class CommonSegDS(Dataset):
    def __init__(self, data_root, config_file, crop_size, mask_pattern='.nii.gz', transforms=None):
        '''
        config_file: generated by invoking 'split_ds' function as follows
        
        '''
        self.data_root = data_root
        self.config_file = config_file
        self.crop_size = crop_size
        self.transforms = transforms

        self.image_root = os.path.join(data_root, 'images')
        self.mask_root = os.path.join(data_root, 'masks')

        self.images_list = []
        self.masks_list = []

        series_uids = []
        with open(config_file) as f:
            for line in f.readlines():
                line = line.strip()
                if line is None or len(line) == 0:
                    continue
                series_uids.append(line)

        image_files = glob(os.path.join(self.image_root, '*.nii.gz'))
        # basenames = [os.path.basename(i).replace('.nii.gz', '') for i in image_files]
        basenames = series_uids
        for basename in basenames:
            image_file = os.path.join(self.image_root, '{}.nii.gz'.format(basename))
            mask_file = os.path.join(self.mask_root, '{}{}'.format(basename, mask_pattern))
            if not os.path.isfile(image_file):
                continue
            if not os.path.isfile(mask_file):
                continue
            self.images_list.append(image_file)
            self.masks_list.append(mask_file)

        print('====> data processed:\t{}'.format(len(self.images_list)))


    def __len__(self):
        return len(self.images_list)

    
    def __getitem__(self, item):
        image_file = self.images_list[item]
        mask_file = self.masks_list[item]
        
        image = DataIO.load_nii_image(image_file)['image']
        mask = DataIO.load_nii_image(mask_file)['image']
        
        cropped_boundary = [0,0,0, image.shape[0]-1, image.shape[1]-1, image.shape[2]-1]
        if np.random.rand() < 0.95:
            boundary = DatasetsUtils.get_random_crop_boundary_3d(self.crop_size, cropped_boundary)
        else:
            boundary = DatasetsUtils.get_center_crop_boundary_3d(self.crop_size, cropped_boundary)

        Z_min, Y_min, X_min, Z_max, Y_max, X_max = boundary

        cropped_image = image[Z_min:Z_max, Y_min:Y_max, X_min:X_max]
        cropped_mask = mask[Z_min:Z_max, Y_min:Y_max, X_min:X_max]
        # cropped_mask[cropped_mask>0] = 1

        image_tensor = torch.from_numpy(cropped_image).float().unsqueeze(0)
        mask_tensor = torch.from_numpy(cropped_mask).long()


        return image_tensor, mask_tensor, image_file, mask_file


def test_CommonSeg_DS():
    from tqdm import tqdm
    data_root = '/fileser/zhangwd/data/lung/changzheng/airway/airway_20201030/paires_croped_by_airway_anno/'
    config_file = '/fileser/zhangwd/data/lung/changzheng/airway/airway_20201030/config/train.txt'
    crop_size = [128, 128, 128]

    ds = CommonSegDS(data_root, config_file, crop_size)
    dataloader = DataLoader(ds, batch_size=2, pin_memory=True, num_workers=2, drop_last=True)
    for index, (images, masks, _, _) in tqdm(enumerate(dataloader)):
        print('images shape:\t', images.shape)


# 将dicom影像批量转化为nii.gz
def convert_format(in_root, out_root, in_pattern='.mha', out_pattern='.nii.gz', is_dcm=False):
    in_uids_paths = []
    if is_dcm:
        in_uids = os.listdir(in_root)
        in_uids_paths = [os.path.join(i) for i in in_uids_paths]
    else:
        in_uids_paths = glob(os.path.join(in_root, '*{}'.format(in_pattern)))
    for in_uid_path in in_uids_paths:
        if is_dcm:
            in_data = DataIO.load_dicom_series(in_uid_path)
        else:
            in_data = DataIO.load_nii_image(in_uid_path)
        uid = os.path.basename(in_uid_path).replace(in_pattern, '')
        out_uid_path = os.path.join(out_root, uid)
        os.makedirs(out_uid_path, exist_ok=True)
        sitk.WriteImage(in_data['sitk_image'], out_uid_path)
        print('====> Save Image: {}'.format(out_uid_path))

if __name__ == '__main__':
    test_CommonSeg_DS()